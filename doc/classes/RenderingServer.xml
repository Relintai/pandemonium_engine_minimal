<?xml version="1.0" encoding="UTF-8" ?>
<class name="RenderingServer" inherits="Object" version="4.2">
	<brief_description>
		Server for anything visible.
	</brief_description>
	<description>
		Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.
		The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
		The visual server can be used to bypass the scene system entirely.
		Resources are created using the [code]*_create[/code] functions.
		All objects are drawn to a viewport. You can use the [Viewport] attached to the [SceneTree] or you can create one yourself with [method viewport_create]. When using a custom scenario or canvas, the scenario or canvas needs to be attached to the viewport using [method viewport_set_scenario] or [method viewport_attach_canvas].
		In 3D, all visual objects must be associated with a scenario. The scenario is a visual representation of the world. If accessing the visual server from a running game, the scenario can be accessed from the scene tree from any [Spatial] node with [method Spatial.get_world]. Otherwise, a scenario can be created with [method scenario_create].
		Similarly, in 2D, a canvas is needed to draw all canvas items.
		In 3D, all visible objects are comprised of a resource and an instance. A resource can be a mesh, a particle system, a light, or any other 3D object. In order to be visible resources must be attached to an instance using [method instance_set_base]. The instance must also be attached to the scenario using [method instance_set_scenario] in order to be visible.
		In 2D, all visible objects are some form of canvas item. In order to be visible, a canvas item needs to be the child of a canvas attached to a viewport, or it needs to be the child of another canvas item that is eventually attached to the canvas.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/performance/using_servers.md</link>
	</tutorials>
	<methods>
		<method name="black_bars_set_images">
			<return type="void" />
			<argument index="0" name="left" type="RID" />
			<argument index="1" name="top" type="RID" />
			<argument index="2" name="right" type="RID" />
			<argument index="3" name="bottom" type="RID" />
			<description>
				Sets images to be rendered in the window margin.
			</description>
		</method>
		<method name="black_bars_set_margins">
			<return type="void" />
			<argument index="0" name="left" type="int" />
			<argument index="1" name="top" type="int" />
			<argument index="2" name="right" type="int" />
			<argument index="3" name="bottom" type="int" />
			<description>
				Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.
			</description>
		</method>
		<method name="canvas_create">
			<return type="RID" />
			<description>
				Creates a canvas and returns the assigned [RID]. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="canvas_item_add_circle">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="pos" type="Vector2" />
			<argument index="2" name="radius" type="float" />
			<argument index="3" name="color" type="Color" />
			<description>
				Adds a circle command to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_clip_ignore">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="ignore" type="bool" />
			<description>
				If ignore is [code]true[/code], the RenderingServer does not perform clipping.
			</description>
		</method>
		<method name="canvas_item_add_line">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="from" type="Vector2" />
			<argument index="2" name="to" type="Vector2" />
			<argument index="3" name="color" type="Color" />
			<argument index="4" name="width" type="float" default="1.0" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Adds a line command to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_mesh">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<argument index="2" name="transform" type="Transform2D" default="Transform2D( 1, 0, 0, 1, 0, 0 )" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="normal_map" type="RID" />
			<description>
				Adds a mesh command to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_multimesh">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="normal_map" type="RID" />
			<description>
				Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
			</description>
		</method>
		<method name="canvas_item_add_nine_patch">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="source" type="Rect2" />
			<argument index="3" name="texture" type="RID" />
			<argument index="4" name="topleft" type="Vector2" />
			<argument index="5" name="bottomright" type="Vector2" />
			<argument index="6" name="x_axis_mode" type="int" enum="RenderingServer.NinePatchAxisMode" default="0" />
			<argument index="7" name="y_axis_mode" type="int" enum="RenderingServer.NinePatchAxisMode" default="0" />
			<argument index="8" name="draw_center" type="bool" default="true" />
			<argument index="9" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="10" name="normal_map" type="RID" />
			<description>
				Adds a nine patch image to the [CanvasItem]'s draw commands.
				See [NinePatchRect] for more explanation.
			</description>
		</method>
		<method name="canvas_item_add_polygon">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="normal_map" type="RID" />
			<argument index="6" name="antialiased" type="bool" default="false" />
			<description>
				Adds a polygon to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_polyline">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_primitive">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="uvs" type="PoolVector2Array" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="width" type="float" default="1.0" />
			<argument index="6" name="normal_map" type="RID" />
			<description>
				Adds a primitive to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="color" type="Color" />
			<description>
				Adds a rectangle to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_set_transform">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Adds a [Transform2D] command to the [CanvasItem]'s draw commands.
				This sets the extra_matrix uniform when executed. This affects the later commands of the canvas item.
			</description>
		</method>
		<method name="canvas_item_add_texture_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="tile" type="bool" default="false" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="5" name="transpose" type="bool" default="false" />
			<argument index="6" name="normal_map" type="RID" />
			<description>
				Adds a textured rect to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_texture_rect_region">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="src_rect" type="Rect2" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="5" name="transpose" type="bool" default="false" />
			<argument index="6" name="normal_map" type="RID" />
			<argument index="7" name="clip_uv" type="bool" default="true" />
			<description>
				Adds a texture rect with region setting to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_add_triangle_array">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="indices" type="PoolIntArray" />
			<argument index="2" name="points" type="PoolVector2Array" />
			<argument index="3" name="colors" type="PoolColorArray" />
			<argument index="4" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="5" name="bones" type="PoolIntArray" default="PoolIntArray(  )" />
			<argument index="6" name="weights" type="PoolRealArray" default="PoolRealArray(  )" />
			<argument index="7" name="texture" type="RID" />
			<argument index="8" name="count" type="int" default="-1" />
			<argument index="9" name="normal_map" type="RID" />
			<argument index="10" name="antialiased" type="bool" default="false" />
			<argument index="11" name="antialiasing_use_indices" type="bool" default="false" />
			<description>
				Adds a triangle array to the [CanvasItem]'s draw commands.
			</description>
		</method>
		<method name="canvas_item_clear">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<description>
				Clears the [CanvasItem] and removes all commands in it.
			</description>
		</method>
		<method name="canvas_item_create">
			<return type="RID" />
			<description>
				Creates a new [CanvasItem] and returns its [RID]. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_item_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="canvas_item_set_clip">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="clip" type="bool" />
			<description>
				Sets clipping for the [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_copy_to_backbuffer">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<argument index="2" name="rect" type="Rect2" />
			<description>
				Sets the [CanvasItem] to copy a rect to the backbuffer.
			</description>
		</method>
		<method name="canvas_item_set_custom_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="use_custom_rect" type="bool" />
			<argument index="2" name="rect" type="Rect2" default="Rect2( 0, 0, 0, 0 )" />
			<description>
				Defines a custom drawing rectangle for the [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_distance_field_mode">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Enables the use of distance fields for GUI elements that are rendering distance field based fonts.
			</description>
		</method>
		<method name="canvas_item_set_draw_behind_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Sets [CanvasItem] to be drawn behind its parent.
			</description>
		</method>
		<method name="canvas_item_set_draw_index">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Sets the index for the [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_light_mask">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				The light mask. See [LightOccluder2D] for more information on light masks.
			</description>
		</method>
		<method name="canvas_item_set_material">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Sets a new material to the [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_modulate">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Sets the color that modulates the [CanvasItem] and its children.
			</description>
		</method>
		<method name="canvas_item_set_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="parent" type="RID" />
			<description>
				Sets the parent for the [CanvasItem]. The parent can be another canvas item, or it can be the root canvas that is attached to the viewport.
			</description>
		</method>
		<method name="canvas_item_set_self_modulate">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Sets the color that modulates the [CanvasItem] without children.
			</description>
		</method>
		<method name="canvas_item_set_sort_children_by_y">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Sets if [CanvasItem]'s children should be sorted by y-position.
			</description>
		</method>
		<method name="canvas_item_set_transform">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Sets the [CanvasItem]'s [Transform2D].
			</description>
		</method>
		<method name="canvas_item_set_use_parent_material">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Sets if the [CanvasItem] uses its parent's material.
			</description>
		</method>
		<method name="canvas_item_set_visible">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="visible" type="bool" />
			<description>
				Sets if the canvas item (including its children) is visible.
			</description>
		</method>
		<method name="canvas_item_set_z_as_relative_to_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If this is enabled, the Z index of the parent will be added to the children's Z index.
			</description>
		</method>
		<method name="canvas_item_set_z_index">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="z_index" type="int" />
			<description>
				Sets the [CanvasItem]'s Z index, i.e. its draw order (lower indexes are drawn first).
			</description>
		</method>
		<method name="canvas_set_item_mirroring">
			<return type="void" />
			<argument index="0" name="canvas" type="RID" />
			<argument index="1" name="item" type="RID" />
			<argument index="2" name="mirroring" type="Vector2" />
			<description>
				A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].
			</description>
		</method>
		<method name="canvas_set_modulate">
			<return type="void" />
			<argument index="0" name="canvas" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Modulates all colors in the given canvas.
			</description>
		</method>
		<method name="debug_canvas_item_get_local_bound">
			<return type="Rect2" />
			<argument index="0" name="item" type="RID" />
			<description>
				Returns the bounding rectangle for a canvas item and its descendants in local space, as calculated by the renderer. This bound is used internally for culling.
				[b]Warning:[/b] This function is intended for debugging in the editor, and will pass through and return a zero [Rect2] in exported projects.
			</description>
		</method>
		<method name="debug_canvas_item_get_rect">
			<return type="Rect2" />
			<argument index="0" name="item" type="RID" />
			<description>
				Returns the bounding rectangle for a canvas item in local space, as calculated by the renderer. This bound is used internally for culling.
				[b]Warning:[/b] This function is intended for debugging in the editor, and will pass through and return a zero [Rect2] in exported projects.
			</description>
		</method>
		<method name="draw">
			<return type="void" />
			<argument index="0" name="swap_buffers" type="bool" default="true" />
			<argument index="1" name="frame_step" type="float" default="0.0" />
			<description>
				Draws a frame. [i]This method is deprecated[/i], please use [method force_draw] instead.
			</description>
		</method>
		<method name="finish">
			<return type="void" />
			<description>
				Removes buffers and clears testcubes.
			</description>
		</method>
		<method name="force_draw">
			<return type="void" />
			<argument index="0" name="swap_buffers" type="bool" default="true" />
			<argument index="1" name="frame_step" type="float" default="0.0" />
			<description>
				Forces a frame to be drawn when the function is called. Drawing a frame updates all [Viewport]s that are set to update. Use with extreme caution.
			</description>
		</method>
		<method name="force_sync">
			<return type="void" />
			<description>
				Synchronizes threads.
			</description>
		</method>
		<method name="free_rid">
			<return type="void" />
			<argument index="0" name="rid" type="RID" />
			<description>
				Tries to free an object in the RenderingServer.
			</description>
		</method>
		<method name="get_render_info">
			<return type="int" />
			<argument index="0" name="info" type="int" enum="RenderingServer.RenderInfo" />
			<description>
				Returns a certain information, see [enum RenderInfo] for options.
			</description>
		</method>
		<method name="get_test_cube">
			<return type="RID" />
			<description>
				Returns the id of the test cube. Creates one if none exists.
			</description>
		</method>
		<method name="get_test_texture">
			<return type="RID" />
			<description>
				Returns the id of the test texture. Creates one if none exists.
			</description>
		</method>
		<method name="get_video_adapter_name" qualifiers="const">
			<return type="String" />
			<description>
				Returns the name of the video adapter (e.g. "GeForce GTX 1080/PCIe/SSE2").
				[b]Note:[/b] When running a headless or server binary, this function returns an empty string.
			</description>
		</method>
		<method name="get_video_adapter_vendor" qualifiers="const">
			<return type="String" />
			<description>
				Returns the vendor of the video adapter (e.g. "NVIDIA Corporation").
				[b]Note:[/b] When running a headless or server binary, this function returns an empty string.
			</description>
		</method>
		<method name="get_white_texture">
			<return type="RID" />
			<description>
				Returns the id of a white texture. Creates one if none exists.
			</description>
		</method>
		<method name="has_changed" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="queried_priority" type="int" enum="RenderingServer.ChangedPriority" default="0" />
			<description>
				Returns [code]true[/code] if changes have been made to the RenderingServer's data. [method draw] is usually called if this happens.
				As changes are registered as either high or low priority (e.g. dynamic shaders), this function takes an optional argument to query either low or high priority changes, or any changes.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="feature" type="int" enum="RenderingServer.Features" />
			<description>
				Not yet implemented. Always returns [code]false[/code].
			</description>
		</method>
		<method name="has_os_feature" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="feature" type="String" />
			<description>
				Returns [code]true[/code] if the OS supports a certain feature. Features might be [code]s3tc[/code], [code]etc[/code], [code]etc2[/code], [code]pvrtc[/code] and [code]skinning_fallback[/code].
				When rendering with GLES2, returns [code]true[/code] with [code]skinning_fallback[/code] in case the hardware doesn't support the default GPU skinning process.
			</description>
		</method>
		<method name="init">
			<return type="void" />
			<description>
				Initializes the visual server. This function is called internally by platform-dependent code during engine initialization. If called from a running game, it will not do anything.
			</description>
		</method>
		<method name="make_sphere_mesh">
			<return type="RID" />
			<argument index="0" name="latitudes" type="int" />
			<argument index="1" name="longitudes" type="int" />
			<argument index="2" name="radius" type="float" />
			<description>
				Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.
			</description>
		</method>
		<method name="material_create">
			<return type="RID" />
			<description>
				Creates an empty material and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all [code]material_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="material_get_param" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="StringName" />
			<description>
			</description>
		</method>
		<method name="material_get_param_default" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="StringName" />
			<description>
			</description>
		</method>
		<method name="material_get_shader" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="shader_material" type="RID" />
			<description>
				Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.
			</description>
		</method>
		<method name="material_set_line_width">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="width" type="float" />
			<description>
				Sets a material's line width.
			</description>
		</method>
		<method name="material_set_next_pass">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="next_material" type="RID" />
			<description>
				Sets an object's next material.
			</description>
		</method>
		<method name="material_set_param">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="StringName" />
			<argument index="2" name="value" type="Variant" />
			<description>
			</description>
		</method>
		<method name="material_set_render_priority">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="priority" type="int" />
			<description>
				Sets a material's render priority.
			</description>
		</method>
		<method name="material_set_shader">
			<return type="void" />
			<argument index="0" name="shader_material" type="RID" />
			<argument index="1" name="shader" type="RID" />
			<description>
				Sets a shader material's shader.
			</description>
		</method>
		<method name="mesh_add_surface_from_arrays">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="primitive" type="int" enum="RenderingServer.PrimitiveType" />
			<argument index="2" name="arrays" type="Array" />
			<argument index="3" name="blend_shapes" type="Array" default="[  ]" />
			<argument index="4" name="compress_format" type="int" default="7936" />
			<description>
				Adds a surface generated from the Arrays to a mesh. See [enum PrimitiveType] constants for types.
			</description>
		</method>
		<method name="mesh_clear">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Removes all surfaces from a mesh.
			</description>
		</method>
		<method name="mesh_create">
			<return type="RID" />
			<description>
				Creates a new mesh and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all [code]mesh_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
				To place in a scene, attach this mesh to an instance using [method instance_set_base] using the returned RID.
			</description>
		</method>
		<method name="mesh_get_blend_shape_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Returns a mesh's blend shape count.
			</description>
		</method>
		<method name="mesh_get_blend_shape_mode" qualifiers="const">
			<return type="int" enum="RenderingServer.BlendShapeMode" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Returns a mesh's blend shape mode.
			</description>
		</method>
		<method name="mesh_get_custom_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Returns a mesh's custom aabb.
			</description>
		</method>
		<method name="mesh_get_surface_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Returns a mesh's number of surfaces.
			</description>
		</method>
		<method name="mesh_remove_surface">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Removes a mesh's surface.
			</description>
		</method>
		<method name="mesh_set_blend_shape_count">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="amount" type="int" />
			<description>
				Sets a mesh's blend shape count.
			</description>
		</method>
		<method name="mesh_set_blend_shape_mode">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="mode" type="int" enum="RenderingServer.BlendShapeMode" />
			<description>
				Sets a mesh's blend shape mode.
			</description>
		</method>
		<method name="mesh_set_custom_aabb">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="aabb" type="AABB" />
			<description>
				Sets a mesh's custom aabb.
			</description>
		</method>
		<method name="mesh_surface_get_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's aabb.
			</description>
		</method>
		<method name="mesh_surface_get_array" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's vertex buffer.
			</description>
		</method>
		<method name="mesh_surface_get_array_index_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's amount of indices.
			</description>
		</method>
		<method name="mesh_surface_get_array_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's amount of vertices.
			</description>
		</method>
		<method name="mesh_surface_get_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's buffer arrays.
			</description>
		</method>
		<method name="mesh_surface_get_blend_shape_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's arrays for blend shapes.
			</description>
		</method>
		<method name="mesh_surface_get_format" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns the format of a mesh's surface.
			</description>
		</method>
		<method name="mesh_surface_get_format_offset" qualifiers="const">
			<return type="int" />
			<argument index="0" name="format" type="int" />
			<argument index="1" name="vertex_len" type="int" />
			<argument index="2" name="index_len" type="int" />
			<argument index="3" name="array_index" type="int" />
			<description>
				Function is unused in Godot 3.x.
			</description>
		</method>
		<method name="mesh_surface_get_format_stride" qualifiers="const">
			<return type="int" />
			<argument index="0" name="format" type="int" />
			<argument index="1" name="vertex_len" type="int" />
			<argument index="2" name="index_len" type="int" />
			<argument index="3" name="array_index" type="int" />
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_index_array" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's index buffer.
			</description>
		</method>
		<method name="mesh_surface_get_material" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns a mesh's surface's material.
			</description>
		</method>
		<method name="mesh_surface_get_primitive_type" qualifiers="const">
			<return type="int" enum="RenderingServer.PrimitiveType" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Returns the primitive type of a mesh's surface.
			</description>
		</method>
		<method name="mesh_surface_set_material">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<argument index="2" name="material" type="RID" />
			<description>
				Sets a mesh's surface's material.
			</description>
		</method>
		<method name="mesh_surface_update_region">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<argument index="2" name="offset" type="int" />
			<argument index="3" name="data" type="PoolByteArray" />
			<description>
				Updates a specific region of a vertex buffer for the specified surface. Warning: this function alters the vertex buffer directly with no safety mechanisms, you can easily corrupt your mesh.
			</description>
		</method>
		<method name="multimesh_allocate">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="instances" type="int" />
			<argument index="2" name="transform_format" type="int" enum="RenderingServer.MultimeshTransformFormat" />
			<argument index="3" name="color_format" type="int" enum="RenderingServer.MultimeshColorFormat" />
			<argument index="4" name="custom_data_format" type="int" enum="RenderingServer.MultimeshCustomDataFormat" default="0" />
			<description>
				Allocates space for the multimesh data. Format parameters determine how the data will be stored by OpenGL. See [enum MultimeshTransformFormat], [enum MultimeshColorFormat], and [enum MultimeshCustomDataFormat] for usage. Equivalent to [member MultiMesh.instance_count].
			</description>
		</method>
		<method name="multimesh_create">
			<return type="RID" />
			<description>
				Creates a new multimesh on the RenderingServer and returns an [RID] handle. This RID will be used in all [code]multimesh_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
				To place in a scene, attach this multimesh to an instance using [method instance_set_base] using the returned RID.
			</description>
		</method>
		<method name="multimesh_get_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Calculates and returns the axis-aligned bounding box that encloses all instances within the multimesh.
			</description>
		</method>
		<method name="multimesh_get_instance_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Returns the number of instances allocated for this multimesh.
			</description>
		</method>
		<method name="multimesh_get_mesh" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Returns the RID of the mesh that will be used in drawing this multimesh.
			</description>
		</method>
		<method name="multimesh_get_visible_instances" qualifiers="const">
			<return type="int" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Returns the number of visible instances for this multimesh.
			</description>
		</method>
		<method name="multimesh_instance_get_color" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Returns the color by which the specified instance will be modulated.
			</description>
		</method>
		<method name="multimesh_instance_get_custom_data" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Returns the custom data associated with the specified instance.
			</description>
		</method>
		<method name="multimesh_instance_get_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Returns the [Transform] of the specified instance.
			</description>
		</method>
		<method name="multimesh_instance_get_transform_2d" qualifiers="const">
			<return type="Transform2D" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Returns the [Transform2D] of the specified instance. For use when the multimesh is set to use 2D transforms.
			</description>
		</method>
		<method name="multimesh_instance_reset_physics_interpolation">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Prevents physics interpolation for the specified instance during the current physics tick.
				This is useful when moving an instance to a new location, to give an instantaneous change rather than interpolation from the previous location.
			</description>
		</method>
		<method name="multimesh_instance_set_color">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="color" type="Color" />
			<description>
				Sets the color by which this instance will be modulated. Equivalent to [method MultiMesh.set_instance_color].
			</description>
		</method>
		<method name="multimesh_instance_set_custom_data">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="custom_data" type="Color" />
			<description>
				Sets the custom data for this instance. Custom data is passed as a [Color], but is interpreted as a [code]vec4[/code] in the shader. Equivalent to [method MultiMesh.set_instance_custom_data].
			</description>
		</method>
		<method name="multimesh_instance_set_transform">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Sets the [Transform] for this instance. Equivalent to [method MultiMesh.set_instance_transform].
			</description>
		</method>
		<method name="multimesh_instance_set_transform_2d">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="transform" type="Transform2D" />
			<description>
				Sets the [Transform2D] for this instance. For use when multimesh is used in 2D. Equivalent to [method MultiMesh.set_instance_transform_2d].
			</description>
		</method>
		<method name="multimesh_set_as_bulk_array">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="array" type="PoolRealArray" />
			<description>
				Sets all data related to the instances in one go. This is especially useful when loading the data from disk or preparing the data from GDNative.

				All data is packed in one large float array. An array may look like this: Transform for instance 1, color data for instance 1, custom data for instance 1, transform for instance 2, color data for instance 2, etc.

				[Transform] is stored as 12 floats, [Transform2D] is stored as 8 floats, [code]COLOR_8BIT[/code] / [code]CUSTOM_DATA_8BIT[/code] is stored as 1 float (4 bytes as is) and [code]COLOR_FLOAT[/code] / [code]CUSTOM_DATA_FLOAT[/code] is stored as 4 floats.
			</description>
		</method>
		<method name="multimesh_set_as_bulk_array_interpolated">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="array" type="PoolRealArray" />
			<argument index="2" name="array_previous" type="PoolRealArray" />
			<description>
				Alternative version of [method multimesh_set_as_bulk_array] for use with physics interpolation.
				Takes both an array of current data and an array of data for the previous physics tick.
			</description>
		</method>
		<method name="multimesh_set_mesh">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<description>
				Sets the mesh to be drawn by the multimesh. Equivalent to [member MultiMesh.mesh].
			</description>
		</method>
		<method name="multimesh_set_physics_interpolated">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="interpolated" type="bool" />
			<description>
				Turns on and off physics interpolation for the [MultiMesh].
			</description>
		</method>
		<method name="multimesh_set_physics_interpolation_quality">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="quality" type="int" enum="RenderingServer.MultimeshPhysicsInterpolationQuality" />
			<description>
				Sets the physics interpolation quality for the [MultiMesh].
				A value of [code]0[/code] gives fast but low quality interpolation, a value of [code]1[/code] gives slower but higher quality interpolation.
			</description>
		</method>
		<method name="multimesh_set_visible_instances">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="visible" type="int" />
			<description>
				Sets the number of instances visible at a given time. If -1, all instances that have been allocated are drawn. Equivalent to [member MultiMesh.visible_instance_count].
			</description>
		</method>
		<method name="request_frame_drawn_callback">
			<return type="void" />
			<argument index="0" name="where" type="Object" />
			<argument index="1" name="method" type="StringName" />
			<argument index="2" name="userdata" type="Variant" />
			<description>
			</description>
		</method>
		<method name="set_boot_image">
			<return type="void" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="scale" type="bool" />
			<argument index="3" name="use_filter" type="bool" default="true" />
			<description>
				Sets a boot image. The color defines the background color. If [code]scale[/code] is [code]true[/code], the image will be scaled to fit the screen size. If [code]use_filter[/code] is [code]true[/code], the image will be scaled with linear interpolation. If [code]use_filter[/code] is [code]false[/code], the image will be scaled with nearest-neighbor interpolation.
			</description>
		</method>
		<method name="set_debug_generate_wireframes">
			<return type="void" />
			<argument index="0" name="generate" type="bool" />
			<description>
				If [code]true[/code], the engine will generate wireframes for use with the wireframe debug mode.
			</description>
		</method>
		<method name="set_default_clear_color">
			<return type="void" />
			<argument index="0" name="color" type="Color" />
			<description>
				Sets the default clear color which is used when a specific clear color has not been selected.
			</description>
		</method>
		<method name="set_shader_async_hidden_forbidden">
			<return type="void" />
			<argument index="0" name="forbidden" type="bool" />
			<description>
				If asynchronous shader compilation is enabled, this controls whether [constant SpatialMaterial.ASYNC_MODE_HIDDEN] is obeyed.
				For instance, you may want to enable this temporarily before taking a screenshot. This ensures everything is visible even if shaders with async mode [i]hidden[/i] are not ready yet.
				Reflection probes use this internally to ensure they capture everything regardless the shaders are ready or not.
			</description>
		</method>
		<method name="set_shader_time_scale">
			<return type="void" />
			<argument index="0" name="scale" type="float" />
			<description>
				Sets the scale to apply to the passage of time for the shaders' [code]TIME[/code] builtin.
				The default value is [code]1.0[/code], which means [code]TIME[/code] will count the real time as it goes by, without narrowing or stretching it.
			</description>
		</method>
		<method name="shader_create">
			<return type="RID" />
			<description>
				Creates an empty shader and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all [code]shader_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="shader_get_code" qualifiers="const">
			<return type="String" />
			<argument index="0" name="shader" type="RID" />
			<description>
				Returns a shader's code.
			</description>
		</method>
		<method name="shader_get_default_texture_param" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="name" type="StringName" />
			<description>
			</description>
		</method>
		<method name="shader_get_param_list" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="shader" type="RID" />
			<description>
				Returns the parameters of a shader.
			</description>
		</method>
		<method name="shader_set_code">
			<return type="void" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="code" type="String" />
			<description>
				Sets a shader's code.
			</description>
		</method>
		<method name="shader_set_default_texture_param">
			<return type="void" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="name" type="StringName" />
			<argument index="2" name="texture" type="RID" />
			<description>
			</description>
		</method>
		<method name="sync">
			<return type="void" />
			<description>
				Not implemented in Godot 3.x.
			</description>
		</method>
		<method name="texture_allocate">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<argument index="3" name="depth_3d" type="int" />
			<argument index="4" name="format" type="int" enum="Image.Format" />
			<argument index="5" name="type" type="int" enum="RenderingServer.TextureType" />
			<argument index="6" name="flags" type="int" default="7" />
			<description>
				Allocates the GPU memory for the texture.
			</description>
		</method>
		<method name="texture_bind">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="number" type="int" />
			<description>
				Binds the texture to a texture slot.
			</description>
		</method>
		<method name="texture_create">
			<return type="RID" />
			<description>
				Creates an empty texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all [code]texture_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="texture_create_from_image">
			<return type="RID" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="flags" type="int" default="7" />
			<description>
				Creates a texture, allocates the space for an image, and fills in the image.
			</description>
		</method>
		<method name="texture_debug_usage">
			<return type="Array" />
			<description>
				Returns a list of all the textures and their information.
			</description>
		</method>
		<method name="texture_get_data" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="cube_side" type="int" default="0" />
			<description>
				Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.
			</description>
		</method>
		<method name="texture_get_depth" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the depth of the texture.
			</description>
		</method>
		<method name="texture_get_flags" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the flags of a texture.
			</description>
		</method>
		<method name="texture_get_format" qualifiers="const">
			<return type="int" enum="Image.Format" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the format of the texture's image.
			</description>
		</method>
		<method name="texture_get_height" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the texture's height.
			</description>
		</method>
		<method name="texture_get_path" qualifiers="const">
			<return type="String" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the texture's path.
			</description>
		</method>
		<method name="texture_get_texid" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the opengl id of the texture's image.
			</description>
		</method>
		<method name="texture_get_type" qualifiers="const">
			<return type="int" enum="RenderingServer.TextureType" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the type of the texture, can be any of the [enum TextureType].
			</description>
		</method>
		<method name="texture_get_width" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Returns the texture's width.
			</description>
		</method>
		<method name="texture_set_data">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="image" type="Image" />
			<argument index="2" name="layer" type="int" default="0" />
			<description>
				Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.
			</description>
		</method>
		<method name="texture_set_data_partial">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="image" type="Image" />
			<argument index="2" name="src_x" type="int" />
			<argument index="3" name="src_y" type="int" />
			<argument index="4" name="src_w" type="int" />
			<argument index="5" name="src_h" type="int" />
			<argument index="6" name="dst_x" type="int" />
			<argument index="7" name="dst_y" type="int" />
			<argument index="8" name="dst_mip" type="int" />
			<argument index="9" name="layer" type="int" default="0" />
			<description>
				Sets a part of the data for a texture. Warning: this function calls the underlying graphics API directly and may corrupt your texture if used improperly.
			</description>
		</method>
		<method name="texture_set_flags">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="flags" type="int" />
			<description>
				Sets the texture's flags. See [enum TextureFlags] for options.
			</description>
		</method>
		<method name="texture_set_path">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="path" type="String" />
			<description>
				Sets the texture's path.
			</description>
		</method>
		<method name="texture_set_proxy">
			<return type="void" />
			<argument index="0" name="proxy" type="RID" />
			<argument index="1" name="base" type="RID" />
			<description>
				Creates an update link between two textures, similar to how [ViewportTexture]s operate. When the base texture is the texture of a [Viewport], every time the viewport renders a new frame, the proxy texture automatically receives an update.
				For example, this code links a generic [ImageTexture] to the texture output of the [Viewport] using the RenderingServer API:
				[codeblock]
				func _ready():
				    var viewport_rid = get_viewport().get_viewport_rid()
				    var viewport_texture_rid = RenderingServer.viewport_get_texture(viewport_rid)

				    var proxy_texture = ImageTexture.new()
				    var viewport_texture_image_data = RenderingServer.texture_get_data(viewport_texture_rid)

				    proxy_texture.create_from_image(viewport_texture_image_data)
				    var proxy_texture_rid = proxy_texture.get_rid()
				    RenderingServer.texture_set_proxy(proxy_texture_rid, viewport_texture_rid)

				    $TextureRect.texture = proxy_texture
				[/codeblock]
			</description>
		</method>
		<method name="texture_set_shrink_all_x2_on_set_data">
			<return type="void" />
			<argument index="0" name="shrink" type="bool" />
			<description>
				If [code]true[/code], sets internal processes to shrink all image data to half the size.
			</description>
		</method>
		<method name="texture_set_size_override">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<argument index="3" name="depth" type="int" />
			<description>
				Resizes the texture to the specified dimensions.
			</description>
		</method>
		<method name="textures_keep_original">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				If [code]true[/code], the image will be stored in the texture's images array if overwritten.
			</description>
		</method>
		<method name="viewport_attach_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Sets a viewport's canvas.
			</description>
		</method>
		<method name="viewport_attach_to_screen">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="rect" type="Rect2" default="Rect2( 0, 0, 0, 0 )" />
			<argument index="2" name="screen" type="int" default="0" />
			<description>
				Copies viewport to a region of the screen specified by [code]rect[/code]. If [member Viewport.render_direct_to_screen] is [code]true[/code], then viewport does not use a framebuffer and the contents of the viewport are rendered directly to screen. However, note that the root viewport is drawn last, therefore it will draw over the screen. Accordingly, you must set the root viewport to an area that does not cover the area that you have attached this viewport to.
				For example, you can set the root viewport to not render at all with the following code:
				[codeblock]
				func _ready():
				    get_viewport().set_attach_to_screen_rect(Rect2())
				    $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))
				[/codeblock]
				Using this can result in significant optimization, especially on lower-end devices. However, it comes at the cost of having to manage your viewports manually. For a further optimization see, [method viewport_set_render_direct_to_screen].
			</description>
		</method>
		<method name="viewport_create">
			<return type="RID" />
			<description>
				Creates an empty viewport and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all [code]viewport_*[/code] RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's [method free_rid] static method.
			</description>
		</method>
		<method name="viewport_detach">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<description>
				Detaches the viewport from the screen.
			</description>
		</method>
		<method name="viewport_get_render_info">
			<return type="int" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="info" type="int" enum="RenderingServer.ViewportRenderInfo" />
			<description>
				Returns a viewport's render information. For options, see the [enum ViewportRenderInfo] constants.
			</description>
		</method>
		<method name="viewport_get_texture" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="viewport" type="RID" />
			<description>
				Returns the viewport's last rendered frame.
			</description>
		</method>
		<method name="viewport_remove_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Detaches a viewport from a canvas and vice versa.
			</description>
		</method>
		<method name="viewport_set_active">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="active" type="bool" />
			<description>
				If [code]true[/code], sets the viewport active, else sets it inactive.
			</description>
		</method>
		<method name="viewport_set_canvas_stacking">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<argument index="2" name="layer" type="int" />
			<argument index="3" name="sublayer" type="int" />
			<description>
				Sets the stacking order for a viewport's canvas.
				[code]layer[/code] is the actual canvas layer, while [code]sublayer[/code] specifies the stacking order of the canvas among those in the same layer.
			</description>
		</method>
		<method name="viewport_set_canvas_transform">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<argument index="2" name="offset" type="Transform2D" />
			<description>
				Sets the transformation of a viewport's canvas.
			</description>
		</method>
		<method name="viewport_set_clear_mode">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="clear_mode" type="int" enum="RenderingServer.ViewportClearMode" />
			<description>
				Sets the clear mode of a viewport. See [enum ViewportClearMode] for options.
			</description>
		</method>
		<method name="viewport_set_debug_draw">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="draw" type="int" enum="RenderingServer.ViewportDebugDraw" />
			<description>
				Sets the debug draw mode of a viewport. See [enum ViewportDebugDraw] for options.
			</description>
		</method>
		<method name="viewport_set_global_canvas_transform">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Sets the viewport's global transformation matrix.
			</description>
		</method>
		<method name="viewport_set_hdr">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If [code]true[/code], the viewport renders to high dynamic range (HDR) instead of standard dynamic range (SDR). See also [method viewport_set_use_32_bpc_depth].
				[b]Note:[/b] Only available on the GLES3 backend.
			</description>
		</method>
		<method name="viewport_set_hide_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="hidden" type="bool" />
			<description>
				If [code]true[/code], the viewport's canvas is not rendered.
			</description>
		</method>
		<method name="viewport_set_msaa">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="msaa" type="int" enum="RenderingServer.ViewportMSAA" />
			<description>
				Sets the anti-aliasing mode. See [enum ViewportMSAA] for options.
			</description>
		</method>
		<method name="viewport_set_parent_viewport">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="parent_viewport" type="RID" />
			<description>
				Sets the viewport's parent to another viewport.
			</description>
		</method>
		<method name="viewport_set_render_direct_to_screen">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If [code]true[/code], render the contents of the viewport directly to screen. This allows a low-level optimization where you can skip drawing a viewport to the root viewport. While this optimization can result in a significant increase in speed (especially on older devices), it comes at a cost of usability. When this is enabled, you cannot read from the viewport or from the [code]SCREEN_TEXTURE[/code]. You also lose the benefit of certain window settings, such as the various stretch modes. Another consequence to be aware of is that in 2D the rendering happens in window coordinates, so if you have a viewport that is double the size of the window, and you set this, then only the portion that fits within the window will be drawn, no automatic scaling is possible, even if your game scene is significantly larger than the window size.
			</description>
		</method>
		<method name="viewport_set_sharpen_intensity">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="intensity" type="float" />
			<description>
				Sets the sharpening [code]intensity[/code] for the [code]viewport[/code]. If set to a value greater than [code]0.0[/code], contrast-adaptive sharpening will be applied to the 3D viewport. This has a low performance cost and can be used to recover some of the sharpness lost from using FXAA. Values around [code]0.5[/code] generally give the best results. See also [method viewport_set_use_fxaa].
			</description>
		</method>
		<method name="viewport_set_size">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<description>
				Sets the viewport's width and height.
			</description>
		</method>
		<method name="viewport_set_transparent_background">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If [code]true[/code], the viewport renders its background as transparent.
			</description>
		</method>
		<method name="viewport_set_update_mode">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="update_mode" type="int" enum="RenderingServer.ViewportUpdateMode" />
			<description>
				Sets when the viewport should be updated. See [enum ViewportUpdateMode] constants for options.
			</description>
		</method>
		<method name="viewport_set_usage">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="usage" type="int" enum="RenderingServer.ViewportUsage" />
			<description>
				Sets the viewport's 2D/3D mode. See [enum ViewportUsage] constants for options.
			</description>
		</method>
		<method name="viewport_set_use_32_bpc_depth">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If [code]true[/code], allocates the viewport's framebuffer with full floating-point precision (32-bit) instead of half floating-point precision (16-bit). Only effective if [method viewport_set_use_32_bpc_depth] is used on the same [Viewport] to set HDR to [code]true[/code].
				[b]Note:[/b] Only available on the GLES3 backend.
			</description>
		</method>
		<method name="viewport_set_use_debanding">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="debanding" type="bool" />
			<description>
				If [code]true[/code], uses a fast post-processing filter to make banding significantly less visible. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.
				[b]Note:[/b] Only available on the GLES3 backend. [member Viewport.hdr] must also be [code]true[/code] for debanding to be effective.
			</description>
		</method>
		<method name="viewport_set_use_fxaa">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="fxaa" type="bool" />
			<description>
				Enables fast approximate antialiasing for this viewport. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K. Some of the lost sharpness can be recovered by enabling contrast-adaptive sharpening (see [method viewport_set_sharpen_intensity]).
			</description>
		</method>
		<method name="viewport_set_vflip">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				If [code]true[/code], the viewport's rendering is flipped vertically.
			</description>
		</method>
	</methods>
	<members>
		<member name="render_loop_enabled" type="bool" setter="set_render_loop_enabled" getter="is_render_loop_enabled">
			If [code]false[/code], disables rendering completely, but the engine logic is still being processed. You can call [method force_draw] to draw a frame even with rendering disabled.
		</member>
	</members>
	<signals>
		<signal name="frame_post_draw">
			<description>
				Emitted at the end of the frame, after the RenderingServer has finished updating all the Viewports.
			</description>
		</signal>
		<signal name="frame_pre_draw">
			<description>
				Emitted at the beginning of the frame, before the RenderingServer updates all the Viewports.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Marks an error that shows that the index array is empty.
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Number of weights/bones per vertex.
		</constant>
		<constant name="CANVAS_ITEM_Z_MIN" value="-4096">
			The minimum Z-layer for canvas items.
		</constant>
		<constant name="CANVAS_ITEM_Z_MAX" value="4096">
			The maximum Z-layer for canvas items.
		</constant>
		<constant name="MAX_GLOW_LEVELS" value="7">
			Max number of glow levels that can be used with glow post-process effect.
		</constant>
		<constant name="MAX_CURSORS" value="8">
			Unused enum in Godot 3.x.
		</constant>
		<constant name="MATERIAL_RENDER_PRIORITY_MIN" value="-128">
			The minimum renderpriority of all materials.
		</constant>
		<constant name="MATERIAL_RENDER_PRIORITY_MAX" value="127">
			The maximum renderpriority of all materials.
		</constant>
		<constant name="CUBEMAP_LEFT" value="0" enum="CubeMapSide">
			Marks the left side of a cubemap.
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1" enum="CubeMapSide">
			Marks the right side of a cubemap.
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2" enum="CubeMapSide">
			Marks the bottom side of a cubemap.
		</constant>
		<constant name="CUBEMAP_TOP" value="3" enum="CubeMapSide">
			Marks the top side of a cubemap.
		</constant>
		<constant name="CUBEMAP_FRONT" value="4" enum="CubeMapSide">
			Marks the front side of a cubemap.
		</constant>
		<constant name="CUBEMAP_BACK" value="5" enum="CubeMapSide">
			Marks the back side of a cubemap.
		</constant>
		<constant name="TEXTURE_TYPE_2D" value="0" enum="TextureType">
			Normal texture with 2 dimensions, width and height.
		</constant>
		<constant name="TEXTURE_TYPE_CUBEMAP" value="2" enum="TextureType">
			Texture made up of six faces, can be looked up with a [code]vec3[/code] in shader.
		</constant>
		<constant name="TEXTURE_TYPE_2D_ARRAY" value="3" enum="TextureType">
			An array of 2-dimensional textures.
		</constant>
		<constant name="TEXTURE_TYPE_3D" value="4" enum="TextureType">
			A 3-dimensional texture with width, height, and depth.
		</constant>
		<constant name="TEXTURE_FLAG_MIPMAPS" value="1" enum="TextureFlags">
			Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio.
		</constant>
		<constant name="TEXTURE_FLAG_REPEAT" value="2" enum="TextureFlags">
			Repeats the texture (instead of clamp to edge).
		</constant>
		<constant name="TEXTURE_FLAG_FILTER" value="4" enum="TextureFlags">
			Uses a magnifying filter, to enable smooth zooming in of the texture.
		</constant>
		<constant name="TEXTURE_FLAG_ANISOTROPIC_FILTER" value="8" enum="TextureFlags">
			Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.
			This results in better-looking textures when viewed from oblique angles.
		</constant>
		<constant name="TEXTURE_FLAG_CONVERT_TO_LINEAR" value="16" enum="TextureFlags">
			Converts the texture to the sRGB color space.
		</constant>
		<constant name="TEXTURE_FLAG_MIRRORED_REPEAT" value="32" enum="TextureFlags">
			Repeats the texture with alternate sections mirrored.
		</constant>
		<constant name="TEXTURE_FLAG_USED_FOR_STREAMING" value="2048" enum="TextureFlags">
			Texture is a video surface.
		</constant>
		<constant name="TEXTURE_FLAGS_DEFAULT" value="7" enum="TextureFlags">
			Default flags. [constant TEXTURE_FLAG_MIPMAPS], [constant TEXTURE_FLAG_REPEAT] and [constant TEXTURE_FLAG_FILTER] are enabled.
		</constant>
		<constant name="SHADER_CANVAS_ITEM" value="0" enum="ShaderMode">
			Shader is a 2D shader.
		</constant>
		<constant name="SHADER_MAX" value="1" enum="ShaderMode">
			Represents the size of the [enum ShaderMode] enum.
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			Array is a vertex array.
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			Array is a normal array.
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			Array is a tangent array.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			Array is a color array.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			Array is an UV coordinates array.
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			Array is an UV coordinates array for the second UV coordinates.
		</constant>
		<constant name="ARRAY_INDEX" value="6" enum="ArrayType">
			Array is index array.
		</constant>
		<constant name="ARRAY_MAX" value="7" enum="ArrayType">
			Represents the size of the [enum ArrayType] enum.
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Flag used to mark a vertex array.
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Flag used to mark a normal array.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Flag used to mark a tangent array.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Flag used to mark a color array.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Flag used to mark an UV coordinates array.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Flag used to mark an UV coordinates array for the second UV coordinates.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="64" enum="ArrayFormat">
			Flag used to mark an index array.
		</constant>
		<constant name="ARRAY_COMPRESS_VERTEX" value="128" enum="ArrayFormat">
			Flag used to mark a compressed (half float) vertex array.
		</constant>
		<constant name="ARRAY_COMPRESS_NORMAL" value="256" enum="ArrayFormat">
			Flag used to mark a compressed (half float) normal array.
		</constant>
		<constant name="ARRAY_COMPRESS_TANGENT" value="512" enum="ArrayFormat">
			Flag used to mark a compressed (half float) tangent array.
		</constant>
		<constant name="ARRAY_COMPRESS_COLOR" value="1024" enum="ArrayFormat">
			Flag used to mark a compressed (half float) color array.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV" value="2048" enum="ArrayFormat">
			Flag used to mark a compressed (half float) UV coordinates array.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV2" value="4096" enum="ArrayFormat">
			Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates.
		</constant>
		<constant name="ARRAY_COMPRESS_INDEX" value="8192" enum="ArrayFormat">
			Flag used to mark a compressed index array.
		</constant>
		<constant name="ARRAY_FLAG_USE_2D_VERTICES" value="16384" enum="ArrayFormat">
			Flag used to mark that the array contains 2D vertices.
		</constant>
		<constant name="ARRAY_COMPRESS_DEFAULT" value="7936" enum="ArrayFormat">
			Used to set flags [constant ARRAY_COMPRESS_NORMAL], [constant ARRAY_COMPRESS_TANGENT], [constant ARRAY_COMPRESS_COLOR], [constant ARRAY_COMPRESS_TEX_UV], [constant ARRAY_COMPRESS_TEX_UV2], [constant ARRAY_COMPRESS_WEIGHTS], and [constant ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION] quickly.
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0" enum="PrimitiveType">
			Primitive to draw consists of points.
		</constant>
		<constant name="PRIMITIVE_LINES" value="1" enum="PrimitiveType">
			Primitive to draw consists of lines.
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2" enum="PrimitiveType">
			Primitive to draw consists of a line strip from start to end.
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3" enum="PrimitiveType">
			Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex).
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4" enum="PrimitiveType">
			Primitive to draw consists of triangles.
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5" enum="PrimitiveType">
			Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle).
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6" enum="PrimitiveType">
			Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle).
		</constant>
		<constant name="PRIMITIVE_MAX" value="7" enum="PrimitiveType">
			Represents the size of the [enum PrimitiveType] enum.
		</constant>
		<constant name="BLEND_SHAPE_MODE_NORMALIZED" value="0" enum="BlendShapeMode">
			Blend shapes are normalized.
		</constant>
		<constant name="BLEND_SHAPE_MODE_RELATIVE" value="1" enum="BlendShapeMode">
			Blend shapes are relative to base weight.
		</constant>
		<constant name="VIEWPORT_UPDATE_DISABLED" value="0" enum="ViewportUpdateMode">
			Do not update the viewport.
		</constant>
		<constant name="VIEWPORT_UPDATE_ONCE" value="1" enum="ViewportUpdateMode">
			Update the viewport once then set to disabled.
		</constant>
		<constant name="VIEWPORT_UPDATE_WHEN_VISIBLE" value="2" enum="ViewportUpdateMode">
			Update the viewport whenever it is visible.
		</constant>
		<constant name="VIEWPORT_UPDATE_ALWAYS" value="3" enum="ViewportUpdateMode">
			Always update the viewport.
		</constant>
		<constant name="VIEWPORT_CLEAR_ALWAYS" value="0" enum="ViewportClearMode">
			The viewport is always cleared before drawing.
		</constant>
		<constant name="VIEWPORT_CLEAR_NEVER" value="1" enum="ViewportClearMode">
			The viewport is never cleared before drawing.
		</constant>
		<constant name="VIEWPORT_CLEAR_ONLY_NEXT_FRAME" value="2" enum="ViewportClearMode">
			The viewport is cleared once, then the clear mode is set to [constant VIEWPORT_CLEAR_NEVER].
		</constant>
		<constant name="VIEWPORT_MSAA_DISABLED" value="0" enum="ViewportMSAA">
			Multisample antialiasing is disabled.
		</constant>
		<constant name="VIEWPORT_MSAA_2X" value="1" enum="ViewportMSAA">
			Multisample antialiasing is set to 2×.
		</constant>
		<constant name="VIEWPORT_MSAA_4X" value="2" enum="ViewportMSAA">
			Multisample antialiasing is set to 4×.
		</constant>
		<constant name="VIEWPORT_MSAA_8X" value="3" enum="ViewportMSAA">
			Multisample antialiasing is set to 8×.
		</constant>
		<constant name="VIEWPORT_MSAA_16X" value="4" enum="ViewportMSAA">
			Multisample antialiasing is set to 16×.
		</constant>
		<constant name="VIEWPORT_MSAA_EXT_2X" value="5" enum="ViewportMSAA">
			Multisample antialiasing is set to 2× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go).
		</constant>
		<constant name="VIEWPORT_MSAA_EXT_4X" value="6" enum="ViewportMSAA">
			Multisample antialiasing is set to 4× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go).
		</constant>
		<constant name="VIEWPORT_USAGE_2D" value="0" enum="ViewportUsage">
			The Viewport does not render 3D but samples.
		</constant>
		<constant name="VIEWPORT_USAGE_2D_NO_SAMPLING" value="1" enum="ViewportUsage">
			The Viewport does not render 3D and does not sample.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="ViewportRenderInfo">
			Number of objects drawn in a single frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME" value="1" enum="ViewportRenderInfo">
			Number of vertices drawn in a single frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="ViewportRenderInfo">
			Number of material changes during this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="ViewportRenderInfo">
			Number of shader changes during this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="ViewportRenderInfo">
			Number of surface changes during this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME" value="5" enum="ViewportRenderInfo">
			Number of draw calls during this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME" value="6" enum="ViewportRenderInfo">
			Number of 2d items drawn this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME" value="7" enum="ViewportRenderInfo">
			Number of 2d draw calls during this frame.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_MAX" value="8" enum="ViewportRenderInfo">
			Represents the size of the [enum ViewportRenderInfo] enum.
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_DISABLED" value="0" enum="ViewportDebugDraw">
			Debug draw is disabled. Default setting.
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_UNSHADED" value="1" enum="ViewportDebugDraw">
			Debug draw sets objects to unshaded.
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_OVERDRAW" value="2" enum="ViewportDebugDraw">
			Overwrites clear color to [code](0,0,0,0)[/code].
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_WIREFRAME" value="3" enum="ViewportDebugDraw">
			Debug draw draws objects in wireframe.
		</constant>
		<constant name="INSTANCE_NONE" value="0" enum="InstanceType">
			The instance does not have a type.
		</constant>
		<constant name="INSTANCE_MESH" value="1" enum="InstanceType">
			The instance is a mesh.
		</constant>
		<constant name="INSTANCE_MULTIMESH" value="2" enum="InstanceType">
			The instance is a multimesh.
		</constant>
		<constant name="INSTANCE_MAX" value="3" enum="InstanceType">
			Represents the size of the [enum InstanceType] enum.
		</constant>
		<constant name="INSTANCE_GEOMETRY_MASK" value="6" enum="InstanceType">
			A combination of the flags of geometry instances (mesh, multimesh, immediate and particles).
		</constant>
		<constant name="INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE" value="0" enum="InstanceFlags">
			When set, manually requests to draw geometry on next frame.
		</constant>
		<constant name="INSTANCE_FLAG_MAX" value="1" enum="InstanceFlags">
			Represents the size of the [enum InstanceFlags] enum.
		</constant>
		<constant name="NINE_PATCH_STRETCH" value="0" enum="NinePatchAxisMode">
			The nine patch gets stretched where needed.
		</constant>
		<constant name="NINE_PATCH_TILE" value="1" enum="NinePatchAxisMode">
			The nine patch gets filled with tiles where needed.
		</constant>
		<constant name="NINE_PATCH_TILE_FIT" value="2" enum="NinePatchAxisMode">
			The nine patch gets filled with tiles where needed and stretches them a bit if needed.
		</constant>
		<constant name="INFO_OBJECTS_IN_FRAME" value="0" enum="RenderInfo">
			The amount of objects in the frame.
		</constant>
		<constant name="INFO_VERTICES_IN_FRAME" value="1" enum="RenderInfo">
			The amount of vertices in the frame.
		</constant>
		<constant name="INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderInfo">
			The amount of modified materials in the frame.
		</constant>
		<constant name="INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderInfo">
			The amount of shader rebinds in the frame.
		</constant>
		<constant name="INFO_SHADER_COMPILES_IN_FRAME" value="4" enum="RenderInfo">
			The peak amount of shaders that have been under compilation in the frame.
			This is useful to know when asynchronous shader compilation has finished for the current shaders on screen.
			[b]Note:[/b] For complete certainty, only assume there are no outstanding compilations when this value is zero for at least two frames in a row.
			Unimplemented in the GLES2 rendering backend, always returns 0.
		</constant>
		<constant name="INFO_SURFACE_CHANGES_IN_FRAME" value="5" enum="RenderInfo">
			The amount of surface changes in the frame.
		</constant>
		<constant name="INFO_DRAW_CALLS_IN_FRAME" value="6" enum="RenderInfo">
			The amount of draw calls in frame.
		</constant>
		<constant name="INFO_2D_ITEMS_IN_FRAME" value="7" enum="RenderInfo">
			The amount of 2d items in the frame.
		</constant>
		<constant name="INFO_2D_DRAW_CALLS_IN_FRAME" value="8" enum="RenderInfo">
			The amount of 2d draw calls in frame.
		</constant>
		<constant name="INFO_USAGE_VIDEO_MEM_TOTAL" value="9" enum="RenderInfo">
			Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0.
		</constant>
		<constant name="INFO_VIDEO_MEM_USED" value="10" enum="RenderInfo">
			The amount of video memory used, i.e. texture and vertex memory combined.
		</constant>
		<constant name="INFO_TEXTURE_MEM_USED" value="11" enum="RenderInfo">
			The amount of texture memory used.
		</constant>
		<constant name="INFO_VERTEX_MEM_USED" value="12" enum="RenderInfo">
			The amount of vertex memory used.
		</constant>
		<constant name="FEATURE_SHADERS" value="0" enum="Features">
			Hardware supports shaders. This enum is currently unused in Godot 3.x.
		</constant>
		<constant name="FEATURE_MULTITHREADED" value="1" enum="Features">
			Hardware supports multithreading. This enum is currently unused in Godot 3.x.
		</constant>
		<constant name="MULTIMESH_TRANSFORM_2D" value="0" enum="MultimeshTransformFormat">
			Use [Transform2D] to store MultiMesh transform.
		</constant>
		<constant name="MULTIMESH_TRANSFORM_3D" value="1" enum="MultimeshTransformFormat">
			Use [Transform] to store MultiMesh transform.
		</constant>
		<constant name="MULTIMESH_COLOR_NONE" value="0" enum="MultimeshColorFormat">
			MultiMesh does not use per-instance color.
		</constant>
		<constant name="MULTIMESH_COLOR_8BIT" value="1" enum="MultimeshColorFormat">
			MultiMesh color uses 8 bits per component. This packs the color into a single float.
		</constant>
		<constant name="MULTIMESH_COLOR_FLOAT" value="2" enum="MultimeshColorFormat">
			MultiMesh color uses a float per channel.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_NONE" value="0" enum="MultimeshCustomDataFormat">
			MultiMesh does not use custom data.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_8BIT" value="1" enum="MultimeshCustomDataFormat">
			MultiMesh custom data uses 8 bits per component. This packs the 4-component custom data into a single float.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_FLOAT" value="2" enum="MultimeshCustomDataFormat">
			MultiMesh custom data uses a float per component.
		</constant>
		<constant name="MULTIMESH_INTERP_QUALITY_FAST" value="0" enum="MultimeshPhysicsInterpolationQuality">
			MultiMesh physics interpolation favours speed over quality.
		</constant>
		<constant name="MULTIMESH_INTERP_QUALITY_HIGH" value="1" enum="MultimeshPhysicsInterpolationQuality">
			MultiMesh physics interpolation favours quality over speed.
		</constant>
		<constant name="CHANGED_PRIORITY_ANY" value="0" enum="ChangedPriority">
			Used to query for any changes that request a redraw, whatever the priority.
		</constant>
		<constant name="CHANGED_PRIORITY_LOW" value="1" enum="ChangedPriority">
			Registered changes which have low priority can be optionally prevented from causing editor redraws. Examples might include dynamic shaders (typically using the [code]TIME[/code] built-in).
		</constant>
		<constant name="CHANGED_PRIORITY_HIGH" value="2" enum="ChangedPriority">
			Registered changes which can cause a redraw default to high priority.
		</constant>
	</constants>
</class>
