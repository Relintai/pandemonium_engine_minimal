<?xml version="1.0" encoding="UTF-8" ?>
<class name="Mesh" inherits="Resource" version="4.2">
	<brief_description>
		A [Resource] that contains vertex array-based geometry.
	</brief_description>
	<description>
		Mesh is a type of [Resource] that contains vertex array-based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.
	</description>
	<tutorials>
		<link title="3D Material Testers Demo">https://godotengine.org/asset-library/asset/123</link>
		<link title="3D Kinematic Character Demo">https://godotengine.org/asset-library/asset/126</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="Third Person Shooter Demo">https://godotengine.org/asset-library/asset/678</link>
	</tutorials>
	<methods>
		<method name="create_outline" qualifiers="const">
			<return type="Mesh" />
			<argument index="0" name="margin" type="float" />
			<description>
				Calculate an outline mesh at a defined offset (margin) from the original mesh.
				[b]Note:[/b] This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise).
			</description>
		</method>
		<method name="generate_triangle_mesh" qualifiers="const">
			<return type="TriangleMesh" />
			<description>
				Generate a [TriangleMesh] from the mesh. Considers only surfaces using one of these primitive types: [constant PRIMITIVE_TRIANGLES], [constant PRIMITIVE_TRIANGLE_STRIP], or [constant PRIMITIVE_TRIANGLE_FAN].
			</description>
		</method>
		<method name="get_aabb" qualifiers="const">
			<return type="AABB" />
			<description>
				Returns the smallest [AABB] enclosing this mesh in local space. Not affected by [code]custom_aabb[/code]. See also [method VisualInstance.get_transformed_aabb].
				[b]Note:[/b] This is only implemented for [ArrayMesh] and [PrimitiveMesh].
			</description>
		</method>
		<method name="get_faces" qualifiers="const">
			<return type="PoolVector3Array" />
			<description>
				Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.
			</description>
		</method>
		<method name="get_surface_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the amount of surfaces that the [Mesh] holds.
			</description>
		</method>
		<method name="surface_get_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see [method ArrayMesh.add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_blend_shape_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the blend shape arrays for the requested surface.
			</description>
		</method>
		<method name="surface_get_material" qualifiers="const">
			<return type="Material" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns a [Material] in a given surface. Surface is rendered using this material.
			</description>
		</method>
		<method name="surface_set_material">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<argument index="1" name="material" type="Material" />
			<description>
				Sets a [Material] for a given surface. Surface will be rendered using this material.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PRIMITIVE_POINTS" value="0" enum="PrimitiveType">
			Render array as points (one vertex equals one point).
		</constant>
		<constant name="PRIMITIVE_LINES" value="1" enum="PrimitiveType">
			Render array as lines (every two vertices a line is created).
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2" enum="PrimitiveType">
			Render array as line strip.
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3" enum="PrimitiveType">
			Render array as line loop (like line strip, but closed).
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4" enum="PrimitiveType">
			Render array as triangles (every three vertices a triangle is created).
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5" enum="PrimitiveType">
			Render array as triangle strips.
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6" enum="PrimitiveType">
			Render array as triangle fans.
		</constant>
		<constant name="BLEND_SHAPE_MODE_NORMALIZED" value="0" enum="BlendShapeMode">
			Blend shapes are normalized.
		</constant>
		<constant name="BLEND_SHAPE_MODE_RELATIVE" value="1" enum="BlendShapeMode">
			Blend shapes are relative to base weight.
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Mesh array contains vertices. All meshes require a vertex array so this should always be present.
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Mesh array contains normals.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Mesh array contains tangents.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Mesh array contains colors.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Mesh array contains UVs.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Mesh array contains second UV.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="64" enum="ArrayFormat">
			Mesh array uses indices.
		</constant>
		<constant name="ARRAY_COMPRESS_BASE" value="7" enum="ArrayFormat">
			Used internally to calculate other [code]ARRAY_COMPRESS_*[/code] enum values. Do not use.
		</constant>
		<constant name="ARRAY_COMPRESS_VERTEX" value="128" enum="ArrayFormat">
			Flag used to mark a compressed (half float) vertex array.
		</constant>
		<constant name="ARRAY_COMPRESS_NORMAL" value="256" enum="ArrayFormat">
			Flag used to mark a compressed (half float) normal array.
		</constant>
		<constant name="ARRAY_COMPRESS_TANGENT" value="512" enum="ArrayFormat">
			Flag used to mark a compressed (half float) tangent array.
		</constant>
		<constant name="ARRAY_COMPRESS_COLOR" value="1024" enum="ArrayFormat">
			Flag used to mark a compressed (half float) color array.
			[b]Note:[/b] If this flag is enabled, vertex colors will be stored as 8-bit unsigned integers. This will clamp overbright colors to [code]Color(1, 1, 1, 1)[/code] and reduce colors' precision.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV" value="2048" enum="ArrayFormat">
			Flag used to mark a compressed (half float) UV coordinates array.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV2" value="4096" enum="ArrayFormat">
			Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates.
		</constant>
		<constant name="ARRAY_COMPRESS_INDEX" value="8192" enum="ArrayFormat">
			Flag used to mark a compressed index array.
		</constant>
		<constant name="ARRAY_FLAG_USE_2D_VERTICES" value="16384" enum="ArrayFormat">
			Flag used to mark that the array contains 2D vertices.
		</constant>
		<constant name="ARRAY_COMPRESS_DEFAULT" value="7936" enum="ArrayFormat">
			Used to set flags [constant ARRAY_COMPRESS_VERTEX], [constant ARRAY_COMPRESS_NORMAL], [constant ARRAY_COMPRESS_TANGENT], [constant ARRAY_COMPRESS_COLOR], [constant ARRAY_COMPRESS_TEX_UV], [constant ARRAY_COMPRESS_TEX_UV2], [constant ARRAY_COMPRESS_WEIGHTS], and [constant ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION] quickly.
			[b]Note:[/b] Since this flag enables [constant ARRAY_COMPRESS_COLOR], vertex colors will be stored as 8-bit unsigned integers. This will clamp overbright colors to [code]Color(1, 1, 1, 1)[/code] and reduce colors' precision.
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			Array of vertices.
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			Array of normals.
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			Array of tangents as an array of floats, 4 floats per tangent.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			Array of colors.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			Array of UV coordinates.
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			Array of second set of UV coordinates.
		</constant>
		<constant name="ARRAY_INDEX" value="6" enum="ArrayType">
			Array of indices.
		</constant>
		<constant name="ARRAY_MAX" value="7" enum="ArrayType">
			Represents the size of the [enum ArrayType] enum.
		</constant>
	</constants>
</class>
